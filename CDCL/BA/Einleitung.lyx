#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrbook
\use_default_options true
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command bibtex
\index_command default
\paperfontsize 12
\spacing onehalf
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3.5cm
\topmargin 2.5cm
\rightmargin 2.5cm
\bottommargin 2.5cm
\secnumdepth 3
\tocdepth 1
\paragraph_separation indent
\paragraph_indentation 0bp
\is_math_indent 0
\math_numbering_side default
\quotes_style german
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Einleitung
\end_layout

\begin_layout Standard
Das Boolean Satisfiability Problem (SAT), auf Deutsch Erfüllbarkeitsproblem
 der Aussagenlogik, ist das erste Problem, welches durch den 
\begin_inset Quotes gld
\end_inset

Satz von Cook
\begin_inset Quotes grd
\end_inset

 als NP-vollständig bewiesen wurde.
 Dadurch wurden zahlreiche Forschungen im Bereich des SAT-Problemes betrieben.
 Mitunter wurden mehrere SAT-Solver entwickelt, wie z.B.
 zChaff und MiniSAT.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Die Entwicklung von effizienten SAT-Solvern ist seit dem Jahr 2002 stetig
 angestiegen.
 Jedoch wird für diese Solver hauptsächlich objektorientierte Programmiersprache
n verwendet.
 Im Gegensatz dazu ist der Anteil von SAT-Solvern, welche komplett in einer
 rein funktionallen Programmiersprache geschriebe wurden, sehr gering.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Im Rahmen dieser Bachelorarbeit wird der Frage nachgegangen, wie eine mögliche
 Umsetzung eines 
\begin_inset Quotes gld
\end_inset

Conflict-driven clause learning
\begin_inset Quotes grd
\end_inset

 (CDCL) SAT-Solvers in einer rein funktionellen Programmiersprache aussehen
 könnte.
 Das Ziel dieser Arbeit ist eine erste Implementierung eines CDCL SAT-Solvers
 in Haskell und mögliche Vorschläge wie deren Implementierung verbessert
 werden kann.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Anhand einer Literaturarbeit werden bestehende Algorithm untersucht u
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
In dieser Arbeit werden zuerst SAT und ihre Solver erläutert, wobei auch
 ein Einblick in die SAT-Competitions gewährt wird.
 Im zweiten Kapitel wird der Unterschied zwischen dem CDCL-Algorithmus und
 dem Davis-Putnam-Logemann-Loveland-Algorithmus (DPLL) erläutert.
 Das dritte Kapitel beinhaltet eine Illustrierung für eine mögliche Umsetzung
 eines CDCL SAT-Solvers.
 Ein Vergleich der Implementierung mit anderen CDCL SAT-Solvern wird im
 vierten Kapitel durgeführt.
 
\end_layout

\end_body
\end_document
