#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrbook
\use_default_options true
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command biber
\index_command default
\paperfontsize 12
\spacing onehalf
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine biblatex
\cite_engine_type authoryear
\biblio_style plainnat
\biblatex_bibstyle numeric
\biblatex_citestyle numeric
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3.5cm
\topmargin 2.5cm
\rightmargin 2.5cm
\bottommargin 2.5cm
\secnumdepth 3
\tocdepth 1
\paragraph_separation indent
\paragraph_indentation 0bp
\is_math_indent 0
\math_numbering_side default
\quotes_style german
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Einleitung
\end_layout

\begin_layout Standard
Das Boolean Satisfiability Problem (SAT), auf Deutsch Erfüllbarkeitsproblem
 der Aussagenlogik, ist das erste Problem, welches durch den 
\begin_inset Quotes gld
\end_inset

Satz von Cook
\begin_inset Quotes grd
\end_inset

 im Jahr 1971 als NP-vollständig bewiesen wurde 
\begin_inset CommandInset citation
LatexCommand citeyear
key "cook_complexity_1971"
literal "false"

\end_inset

.
 Das SAT-Problem ist in der Praxis sehr wichtig, wie z.B.
 in künstliche Intelligenz 
\begin_inset CommandInset citation
LatexCommand citeyear
key "kautz_planning_1992"
literal "false"

\end_inset

 und Bounded Model Checking 
\begin_inset CommandInset citation
LatexCommand citeyear
key "biere_chapter_2009"
literal "false"

\end_inset

, weshalb trotz NP-Vollständigkeit viel Forschung in diesem Bereich betrieben
 wurde.
 Mitunter wurden mehrere SAT-Solver entwickelt, wie z.B.
 zChaff und MiniSAT.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Die Entwicklung von effizienten SAT-Solvern ist seit dem Jahr 2002 stetig
 angestiegen 
\begin_inset CommandInset citation
LatexCommand citeyear
key "satisfiability_application_and_theory_sat_ev_sat_nodate"
literal "false"

\end_inset

.
 Jedoch wird für die Programmierung dieser Solver hauptsächlich eine objektorien
tierte Programmiersprachen verwendet.
 Im Gegensatz dazu ist der Anteil von SAT-Solvern, welche komplett in einer
 rein funktionalen Programmiersprache geschrieben wurden, sehr gering.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Im Rahmen dieser Bachelorarbeit wird der Frage nachgegangen, wie eine mögliche
 Umsetzung eines 
\begin_inset Quotes gld
\end_inset

Conflict-driven clause learning
\begin_inset Quotes grd
\end_inset

 (CDCL) SAT-Solvers in einer rein funktionalen Programmiersprache aussehen
 könnte.
 Das Ziel dieser Arbeit ist eine Implementierung eines CDCL SAT-Solvers
 in Haskell und mögliche Vorschläge wie deren Implementierung verbessert
 werden kann.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Anhand einer Literaturarbeit werden bestehende Algorithmen untersucht, wofür
 verschiedene Arbeiten über CDCL und näherstehende Arbeiten betrachtet werden.
 Die Literaturarbeit wurde gewählt, um bestehende Erforschungen in diesem
 Fachbereich zu erhalten.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
In dieser Arbeit werden zuerst die verschiedenen Programmierparadigmen und
 die verwendete Programmiersprache Haskell in Kapitel 2 erläutert.
 Daraufhin werden SAT und verschiedene SAT-Solver in Kapitel 3 vorgestellt,
 wobei auch ein Einblick in die SAT-Competitions gewährt wird.
 Danach wird der Unterschied zwischen dem CDCL-Algorithmus und dem Davis-Putnam-
Logemann-Loveland-Algorithmus (DPLL) in Kapitel 4 erklärt.
 Das darauffolgenden Kapitel 5 beinhaltet eine Beschreibung für eine Umsetzung
 eines CDCL SAT-Solvers.
 Ein Vergleich der Implementierung mit anderen CDCL SAT-Solvern wird in
 Kapitel 6 durgeführt.
 Im letzten Teil der Arbeit (Kapitel 7) wird ein Fazit über die gewonnenen
 Erkenntnisse gezogen als auch ein Ausblick über Verbesserungsmöglichkeiten
 für eine bessere Effizienz des SAT-Solvers gegeben.
\end_layout

\end_body
\end_document
