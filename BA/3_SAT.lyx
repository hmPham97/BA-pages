#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrbook
\use_default_options true
\master Thesis_CDCL_SAT_Solver.lyx
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command biber
\index_command default
\paperfontsize 12
\spacing onehalf
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine biblatex
\cite_engine_type authoryear
\biblatex_bibstyle numeric
\biblatex_citestyle numeric
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3.5cm
\topmargin 2.5cm
\rightmargin 2.5cm
\bottommargin 2.5cm
\secnumdepth 3
\tocdepth 1
\paragraph_separation indent
\paragraph_indentation 0bp
\is_math_indent 0
\math_numbering_side default
\quotes_style german
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
SAT
\end_layout

\begin_layout Paragraph
Dieses Kapitel gibt eine kurze Einführung zum Thema SAT und einen Einblick
 in die SAT-Competitions.
 Des Weiteren werden die bekannten SAT-Solver zChaff und MiniSAT vorgestellt.
\end_layout

\begin_layout Section
SAT-Problem
\end_layout

\begin_layout Standard
Die SAT Assoziation definiert das SAT-Problem als ein Problem, in dem bestimmt
 werden muss, ob es für ein aussagenlogisches Problem boolesche Wertzuweisungen
 existieren, die dieses dann zu 1 evaluiert 
\begin_inset CommandInset citation
LatexCommand citeyear
key "satisfiability_application_and_theory_sat_ev_sat_nodate-1"
literal "false"

\end_inset

.
 Stephen A.
 Cook hat die NP-Vollständigkeit des SAT-Problems 1971 in seiner Publikation
 bewiesen 
\begin_inset CommandInset citation
LatexCommand citeyear
key "cook_complexity_1971"
literal "false"

\end_inset

, welche 1973 nochmals von Leonid A.
 Levin nachgewiesen wurde 
\begin_inset CommandInset citation
LatexCommand citeyear
key "levin_universal_1973"
literal "false"

\end_inset

.
 Deshalb wird der Beweis oft auch 
\begin_inset Quotes gld
\end_inset

Satz von Cook-Levin
\begin_inset Quotes grd
\end_inset

 genannt.
 Durch diesen Beweis wurde das SAT-Problem als allererstes Problem die NP-Vollst
ändigkeit bewiesen.
\end_layout

\begin_layout Standard
Jedes aussagenlogische Problem kann in 
\begin_inset Quotes gld
\end_inset

Konjunktive Normalform
\begin_inset Quotes grd
\end_inset

 oder zu Englisch 
\begin_inset Quotes gld
\end_inset

Conjunctive Normal Form
\begin_inset Quotes grd
\end_inset

 (CNF) umschrieben werden.
 CNF hierbei ist eine Konjunktion ( 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{math}
\backslash
bigwedge
\backslash
end{math}
\end_layout

\end_inset

 ) von Disjunktionen ( 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{math}
\backslash
bigvee
\backslash
end{math}
\end_layout

\end_inset

 ).
 
\end_layout

\begin_layout Standard
Ein aussagenlogisches Problem besteht aus folgenden Elementen:
\end_layout

\begin_layout Itemize
Literale
\end_layout

\begin_layout Itemize
Klauseln
\end_layout

\begin_layout Itemize
Formeln
\end_layout

\begin_layout Standard
In dieser Arbeit ist ein Literal ein Zeichen, welches mit Wahr (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
topV
\end_layout

\end_inset

) oder Falsch (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
botV
\end_layout

\end_inset

) belegt werden kann und negiert (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
negV
\end_layout

\end_inset

) sein kann.
 Die Belegung eines Literals kann folgendermaßen aussehen:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
x_{1}\equiv\top
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Eine Klausel besteht aus einer Menge von disjunkten Literalen, während eine
 Formel eine Menge von konjunkten Klauseln ist.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Folgende Beispiele zeigen Formeln, die in CNF oder nicht in CNF sind.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
x_{1}\wedge(x_{2}\vee x_{3})
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
x_{1}\wedge\neg x_{2}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
x_{1}\vee x_{2}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
x_{1}\wedge(x_{2}\wedge\neg x_{3})
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
x_{1}\vee(x_{2}\wedge\neg x_{3})
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Die Beispiele 3.2, 3.3 und 3.4 sind in CNF Form, während 3.5 und 3.6 nicht in
 CNF sind.
 Der Grund hierfür liegt daran, dass die Literale innerhalb der Klausel
 verundet sind.
 Das Beispiel 3.3 ist in CNF, da die Literale 
\begin_inset Formula $x_{1}$
\end_inset

 und 
\begin_inset Formula $x_{2}$
\end_inset

 in disjunkter Form sind.
 Diese Probleme können mit zwei Ergebnissen beurteilt werden.
 Als Ergebnis können die Probleme entweder mit Satisfiable (SAT) oder Unsatisfia
ble (UNSAT) evaluiert werden.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Das SAT-Problem findet sich in vielen industriellen Bereichen wieder, die
 sich mit Informatik beschäftigen.
 Darunter zählen z.B.
 Bounded Model Checking
\begin_inset CommandInset citation
LatexCommand citeyear
key "biere_chapter_2009"
literal "false"

\end_inset

, künstliche Intelligenz 
\begin_inset CommandInset citation
LatexCommand citeyear
key "kautz_planning_1992"
literal "false"

\end_inset

 und Theorembeweise 
\begin_inset CommandInset citation
LatexCommand citeyear
key "satisfiability_application_and_theory_sat_ev_sat_nodate-1"
literal "false"

\end_inset

.
\end_layout

\begin_layout Section
SAT-Competition
\end_layout

\begin_layout Standard
Die internationale SAT-Competition findet seit dem Jahr 2002 statt.
 Der Wettbewerb wurde eingeführt, um neue SAT-Solver vorzustellen und Benchmarks
 zu finden, die nicht einfach zu lösen sind.
 Dabei werden die Solver auch mit SAT-Solvern verglichen, die den Stand
 der Technik darstellen.
 Unter anderem existieren im Wettbewerb auch unterschiedliche Disziplinen,
 in denen sich die Solver messen können 
\begin_inset CommandInset citation
LatexCommand citeyear
key "satisfiability_application_and_theory_sat_ev_sat_nodate"
literal "false"

\end_inset

.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Abbildungen/winners-2011.pdf
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
captionof{figure}{Benchmark 2011}{Bildquelle: http://fmv.jku.at/kissat/winners-201
1.pdf} 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Abbildungen/winners-2020.pdf
	scale 50
	clip

\end_inset


\end_layout

\begin_layout Standard
\align block
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
captionof{figure}{Benchmark 2020}{Bildquelle: http://fmv.jku.at/kissat/winners-202
0.pdf} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die x-Achse der Abbildungen 3.1 und 3.2 zeigt die Anzahl der gelösten SAT-Probleme
, während die y-Achse die CPU Zeit darstellt.
 Die Legende stellt die Gewinner der SAT-Competition von 2002 bis 2020 dar.
 Verglichen mit der Abbildung 3.1 wird ersichtlich, dass die Benchmarks aus
 Abbildung 3.2 komplexer wurden, was durch die Ausweitung der Graphen wiedergespi
egelt wird.
 Daraus kann geschlossen werden, dass die Solver mit den Jahren einen höhere
 Leistungsgrad erzielt haben 
\begin_inset CommandInset citation
LatexCommand citeyear
key "biere_kissat_nodate"
literal "false"

\end_inset

.
\end_layout

\begin_layout Section
SAT-Solver
\end_layout

\begin_layout Standard
Es existieren viele SAT-Solver, die gute Leistungen vollbringen beim Lösen
 von SAT-Problemen.
 In den folgenden Abschnitten werden zwei Solver vorgestellt, welche an
 einer SAT-Competition teilgenommen und diese auch zu ihrer Zeit gewonnen
 haben.
 Die zwei SAT-Solver, die vorgestellt werden, sind zChaff und MiniSAT.
\end_layout

\begin_layout Subsection
zChaff
\end_layout

\begin_layout Standard
Der SAT-Solver zChaff basiert auf den Chaff-Algorithmus und wurde an der
 Princeton Universität entwickelt und veröffentlicht.
 Der Chaff-Solver verwendet einen optimierten 
\begin_inset Quotes gld
\end_inset

Boolean Constrainst Propagation
\begin_inset Quotes grd
\end_inset

-Algorithmus (BCP, siehe 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Unitpropagation"
plural "false"
caps "false"
noprefix "false"

\end_inset

) mit 
\begin_inset Quotes gld
\end_inset

Watched Literals
\begin_inset Quotes grd
\end_inset

 (siehe 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Datenstrukturen-(not-done)"
plural "false"
caps "false"
noprefix "false"

\end_inset

) und 
\begin_inset Quotes gld
\end_inset

Variable State Independent Decaying Sum
\begin_inset Quotes grd
\end_inset

 (VSIDS, siehe 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Entscheidungsalgorithmus"
plural "false"
caps "false"
noprefix "false"

\end_inset

) für die Entscheidungsheuristik.
 Des Weiteren wendet zChaff 
\begin_inset Quotes gld
\end_inset

Restarts
\begin_inset Quotes grd
\end_inset

 und 
\begin_inset Quotes gld
\end_inset

Clause Deletion
\begin_inset Quotes grd
\end_inset

 an 
\begin_inset CommandInset citation
LatexCommand citeyear
key "moskewicz_chaff_nodate"
literal "false"

\end_inset

.
 Viele von diesen Ideen wurden später für den 2003 entwickelten MiniSAT
 übernommen 
\begin_inset CommandInset citation
LatexCommand citeyear
key "een_extensible_2003"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
zChaff hat 2004 im 
\begin_inset Quotes gld
\end_inset

Industrial Track
\begin_inset Quotes grd
\end_inset

 die 
\begin_inset Quotes gld
\end_inset

ALL (SAT+UNSAT)
\begin_inset Quotes grd
\end_inset

 und 
\begin_inset Quotes gld
\end_inset

UNSAT
\begin_inset Quotes grd
\end_inset

 Kategorien gewonnen 
\begin_inset CommandInset citation
LatexCommand citeyear
key "satisfiability_application_and_theory_sat_ev_sat_nodate"
literal "false"

\end_inset

.
 
\end_layout

\begin_layout Subsection
MiniSAT
\end_layout

\begin_layout Standard
MiniSAT wurde von Niklas Eén und Niklas Sörensson an der Chalmers University
 of Technology entwickelt.
 Hintergrund für die Entwicklung des Solvers ist die Veröffentlichung eines
 zugänglichen, minimalistischen CDCL-SAT-Solvers, der Watched Literals und
 Dynamic Variable Ordering (VSIDS) verwendet 
\begin_inset CommandInset citation
LatexCommand citeyear
key "een_extensible_2003"
literal "false"

\end_inset

.
 Durch dieses Konzept sind viele SAT-Solver entstanden, die MiniSAT als
 Basis für ihre Entwicklung verwendet haben.
\end_layout

\begin_layout Standard
MiniSAT gewann den ersten Platz im SAT-Race 2006 
\begin_inset CommandInset citation
LatexCommand citeyear
key "sinz_sat-race_nodate"
literal "false"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Section
DIMACS Format
\end_layout

\begin_layout Standard
Damit SAT-Solver ein generelles Dateiformat einlesen könnnen, um aussagenlogisch
e Probleme zu lösen, wurde das DIMACS Format eingeführt.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

c simpleExample.cnf
\end_layout

\begin_layout Plain Layout

c
\end_layout

\begin_layout Plain Layout

p cnf 3 2
\end_layout

\begin_layout Plain Layout

1 2 -3 0
\end_layout

\begin_layout Plain Layout

c Kommentare können auch hier sein
\end_layout

\begin_layout Plain Layout

-2 -1 0
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
DIMACS Format
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Kommentare werden mit einem kleinem 
\shape italic
c
\shape default
 symbolisiert wie z.B.
 in Zeile 1 und 5 im Beispiel, während kleine 
\shape italic
p
\shape default
's die Spezifikationen des SAT-Problemes zeigen.
 Das Wort nach dem 
\shape italic
p
\shape default
 deutet in welcher Form ein Problem dargestellt ist.
 Dies kann entwender CNF oder 
\begin_inset Quotes gld
\end_inset

Disjunktive Normalform
\begin_inset Quotes grd
\end_inset

 (DNF) sein.
 Der erste Integer in Zeile 3 steht für die Anzahl der Literale und der
 Zweite für die Anzahl der Klauseln.
 Wenn nach der p-Zeile ein Integer oder ein Minus die Zeile anführt, so
 beginnt eine Klausel.
 Integer in diesen Zeilen können entweder positive oder negierte Literale
 darstellen.
 Wenn eine 0 eingelesen wird, ist die Klausel vollständig und es wird eine
 neue Zeile eingelesen.
 
\end_layout

\begin_layout Standard
Die decodierte Formel für das obige Beispiel sieht folgendermaßen aus: 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
(1\vee2\vee-3)\wedge(-2\vee-1)
\]

\end_inset


\end_layout

\end_body
\end_document
