#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrbook
\use_default_options true
\master Thesis_CDCL_SAT_Solver.lyx
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command biber
\index_command default
\paperfontsize 12
\spacing onehalf
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine biblatex
\cite_engine_type authoryear
\biblatex_bibstyle numeric
\biblatex_citestyle numeric
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3.5cm
\topmargin 2.5cm
\rightmargin 2.5cm
\bottommargin 2.5cm
\secnumdepth 3
\tocdepth 1
\paragraph_separation indent
\paragraph_indentation 0bp
\is_math_indent 0
\math_numbering_side default
\quotes_style german
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Implementierung des SAT-Solvers
\end_layout

\begin_layout Paragraph
In diesem Kapitel wird die Implementierung des SAT-Solvers diskutiert.
 Hierbei werden zunächsts die notwendigen Datenstrukturen beschrieben und
 danach werden die Algorithmen und der Aufbau des Programmes dargestellt.
 
\end_layout

\begin_layout Section
Datenstrukturen
\end_layout

\begin_layout Standard
In der Implementierung werden mehrere 
\end_layout

\begin_layout Section
Algorithmen
\end_layout

\begin_layout Subsection
Unitpropagation
\end_layout

\begin_layout Standard
Die Unitpropagation ist einer der wichtigsten Algorithmen für moderne SAT-Solver.
 In der Unitpropagation werden Klauseln, die nur ein unbelegtes Literal
 besitzen und noch nicht als SAT evaluiert sind, so belegt, dass Sie wahr
 werden (siehe Kapitel 4.1).
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

unitPropagation :: ClauseList -> TupleClauseList -> Level -> MappedTupleList
 -> TriTuple
\end_layout

\begin_layout Plain Layout

unitPropagation clist tlist lvl mapped
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    -- Case: no UnitClause found or no more clauses in ClauseList
\end_layout

\begin_layout Plain Layout

    | null clist || null fstElem = (clist, tlist, mapped)
\end_layout

\begin_layout Plain Layout

    | otherwise = unitPropagation resolutionC 
\end_layout

\begin_layout Plain Layout

		(tlist ++ [(calcTuple, ogClause)]) lvl updatedMap
\end_layout

\begin_layout Plain Layout

    where 
\end_layout

\begin_layout Plain Layout

          unitClause = getUnitClause clist
\end_layout

\begin_layout Plain Layout

          fstElem = getClauseFromReducedClauseAndOGClause unitClause
\end_layout

\begin_layout Plain Layout

          calcTuple = setVariable fstElem
\end_layout

\begin_layout Plain Layout

          ogClause = Reason (getOGFromReducedClauseAndOGClause unitClause)
\end_layout

\begin_layout Plain Layout

          updatedMap = pushToMappedTupleList mapped lvl calcTuple ogClause
\end_layout

\begin_layout Plain Layout

          subsumptionC = unitSubsumption clist calcTuple
\end_layout

\begin_layout Plain Layout

          resolutionC = unitResolution subsumptionC calcTuple
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
Unitpropagation
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Zunächst wird überprüft, ob die ClauseList Elemente besitzt.
 Wenn dies der Fall ist, wird nach einer Klausel gesucht, die nur ein unbelegtes
 Literal besitzt.
 Wenn jedoch keine Elemente mehr vorhanden sind oder keine Unit-Clause gefunden
 wird, werden die übergebenen Daten zurückgegeben und der Algorithmus wird
 beendet.
 Ansonsten setzt der Algorithmus das Literal so, dass die Klausel wahr wird
 und wendet Subsumption auf die ClauseList an.
 Die neue ClauseList wird dann mit Resolution verändert.
 Gleichzeitig wird der Grund für die Entscheidung des Algorithmus in die
 MappedTupleList aufgenommen..
 Solange der erste Fall nicht eintritt, arbeitet der Algorithmus rekursiv
 mit den bearbeiteten Daten weiter.
\end_layout

\end_body
\end_document
